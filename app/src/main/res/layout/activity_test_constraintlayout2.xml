<?xml version="1.0" encoding="utf-8"?>
<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent">


    <!--简介：ConstraintLayout,在2016的Google IO大会中不仅仅带来了Android Studio 2.2预览版，同时带给我们一个依赖约束的库。
         简单来说，她是相对布局的升级版本，但是区别与相对布局更加强调约束。何为约束，即控件之间的关系。
         她能让你的布局更加扁平化，一般来说一个界面一层就够了；同时借助于AS我们能极其简单的完成界面布局。-->

    <!--1、创建手工约束：要创建一个约束, 你需要在指定手柄上点击并按住鼠标, 然后拖到另一个控件的约束手柄. 一旦锚点变绿, 就可以松开鼠标完成约束创建.-->
    <ImageView
        android:layout_width="100dp"
        android:layout_height="100dp"
        android:src="@drawable/ads"
        android:id="@+id/imageView6"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintLeft_toLeftOf="parent"
        android:layout_marginTop="40dp"
        app:layout_constraintTop_toTopOf="parent"
        tools:layout_constraintRight_creator="1"
        tools:layout_constraintLeft_creator="1" />

    <TextView
        android:text="TextView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:id="@+id/textView5"
        android:layout_marginTop="32dp"
        app:layout_constraintTop_toBottomOf="@+id/imageView6"
        android:layout_marginStart="17dp"
        tools:layout_constraintLeft_creator="1"
        app:layout_constraintLeft_toLeftOf="@+id/imageView6"
        android:layout_marginLeft="17dp" />

    <!--1.1、创建基线约束-->
    <Button
        android:text="Button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:id="@+id/button10"
        tools:layout_constraintTop_creator="1"
        tools:layout_constraintRight_creator="1"
        android:layout_marginEnd="50dp"
        app:layout_constraintRight_toRightOf="@+id/textView5"
        android:layout_marginTop="27dp"
        app:layout_constraintTop_toBottomOf="@+id/textView5"
        android:layout_marginRight="50dp" />

    <Button
        android:text="Button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:id="@+id/button11"
        app:layout_constraintBaseline_toBaselineOf="@+id/button10"
        android:layout_marginStart="56dp"
        tools:layout_constraintLeft_creator="1"
        app:layout_constraintLeft_toLeftOf="@+id/textView5"
        android:layout_marginLeft="56dp" />

    <!--2、Autoconnect：使用自动连接创建约束，Autoconnect, 顾名思义, 自动创建控件之间的连接.
           理解 Autoconnect 尝试创建控件与邻近控件之间的连接的功能非常重要，
           明白 Autoconnect 仅为当前正在移动的控件创建约束是很重要.-->

    <TextView
        android:text="TextView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:id="@+id/textView6"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintLeft_toLeftOf="parent"
        tools:layout_constraintTop_creator="1"
        tools:layout_constraintRight_creator="1"
        android:layout_marginTop="38dp"
        app:layout_constraintTop_toBottomOf="@+id/button11"
        tools:layout_constraintLeft_creator="1" />


    <!--3、Inference：使用推理创建约束，推理引擎辅助开发者在布局添加的元素之间创建约束. 由推理创建的约束依赖于添加到布局的元素的类型和他们的尺寸.-->
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:id="@+id/textView7"
        android:text="推理约束"
        tools:layout_constraintTop_creator="1"
        android:layout_marginStart="7dp"
        android:layout_marginTop="82dp"
        app:layout_constraintTop_toBottomOf="@+id/textView6"
        tools:layout_constraintLeft_creator="1"
        app:layout_constraintLeft_toLeftOf="@+id/textView6"
        android:layout_marginLeft="7dp" />
</android.support.constraint.ConstraintLayout>