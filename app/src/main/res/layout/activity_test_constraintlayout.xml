<?xml version="1.0" encoding="utf-8"?>
<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/layout"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!--1、相对位置属性：layout_constraintLeft_toRightOf这个属性的意思是，buttonB的左边缘，贴着buttonA的右边缘。
           注意这个toRightOf这个和以往的不一样哦！所以刚刚说了RelativeLayout的toRightOf和ConstraintLayout的Left_toRightOf是不一样的。
           RelativeLayout中是将控件作为一个整体，而ConstraintLayout是对齐控件四周的边缘。-->
    <!--1.1-->
    <Button
        android:id="@+id/btnA"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="ButtonA"/>

    <Button
        android:id="@+id/btnB"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:layout_constraintLeft_toRightOf="@+id/btnA"
        android:text="ButtonB"/>

    <!--1.2-->
    <Button
        android:id="@+id/btnC"
        android:layout_width="150dp"
        android:layout_height="150dp"
        app:layout_constraintTop_toBottomOf="@+id/btnA"
        android:text="ButtonC"/>

    <Button
        android:id="@+id/btnD"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toBottomOf="@+id/btnA"
        app:layout_constraintLeft_toLeftOf="@+id/btnC"
        android:text="ButtonD"/>

    <!--1.3:parent代表的是父控件，也就是ConstraintLayout。看上面的代码的意思是，这个按钮的左边距要贴着父控件的左边距，按钮的右边距贴着父控件的右边距。
        但是现在父控件是占满整个屏幕的，而button的大小又是wrap_content，也不可能将button拉大，那这怎么办呢？ 其实这种情况就会让该按钮在父控件中水平居中（垂直不居中）。 -->
    <Button
        android:id="@+id/btnE"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="ButtonE"
        app:layout_constraintTop_toBottomOf="@+id/btnC"
        app:layout_constraintLeft_toLeftOf="@+id/layout"
        app:layout_constraintRight_toRightOf="@id/layout"/>

    <!--1.4：原来接触过android:layout_marginLeft等属性，是用来控制该控件与周围控件的间隔大小。
             而在ConstraintLayout中多了一些属性，看标题就知道当你周围对齐的目标控件为gone的时候，所设置的margin。-->
    <Button
        android:id="@+id/btnF"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toBottomOf="@+id/btnE"
        android:text="ButtonF"/>

    <Button
        android:id="@+id/btnG"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toBottomOf="@+id/btnE"
        app:layout_constraintLeft_toRightOf="@+id/btnF"
        app:layout_goneMarginLeft="40dp"
        android:text="ButtonG"/>

    <!--2、layout_constraintHorizontal_bias：刚刚说到一种情况就是当控件水平居中的时候，那么如何控制该控件在父控件居中的比例呢？
           -->
    <Button
        android:id="@+id/btnH"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toBottomOf="@+id/btnG"
        app:layout_constraintLeft_toLeftOf="@+id/layout"
        app:layout_constraintRight_toRightOf="@+id/layout"
        app:layout_constraintHorizontal_bias="0.3"
        android:text="ButtonH"/>

    <!--3、app:layout_constraintDimensionRatio：比例的格式是“width：height”。当然这只是设置了比例，你还需要指定长（或宽）有固定大小
           一下情况就是指：这种情况的话，button的宽度根据button的内容而定，而高度的话，会设置成与宽度一样大小。
           而不固定的一方一定要设置成0dp，这里height根据width而改变，则需要设置成0dp。-->
    <Button
        android:id="@+id/btnI"
        android:layout_width="wrap_content"
        android:layout_height="0dp"
        android:text="ButtonI"
        app:layout_constraintTop_toBottomOf="@+id/btnH"
        app:layout_constraintDimensionRatio="1:1"/>

    <!--总结：1、通过本篇文章的学习，基本上一个简单的不需要滚动的布局都可以使用约束布局来完成，也仅仅只需要一层就可以了，所有的控件无论再多一层足够了。

              2、这是否意味着抛弃其他控件？并不是的！约束布局仅仅只是一种新的思路，其适用于界面不太复杂，并且不滚动的界面中布局，如果界面元素很多甚至超过屏幕，那么并不建议使用约束布局。

              3、另外约束布局仅仅是简单快捷的布局，其性能负担随着界面中的控件数量以及约束条件的增加而增加；所以使用时还需要多多考究。-->
</android.support.constraint.ConstraintLayout>